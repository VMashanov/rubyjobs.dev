# typed: ignore
# frozen_string_literal: true

module Web
  module Views
    class ApplicationLayout
      include Web::Layout

      def vacancy_information(vacancy, analitics = nil)
        published_at = RelativeTime.in_words(vacancy.created_at, locale: :ru)
        analitics_information = analitics && ", #{analitics.view_count} üëÄ"

        # rubocop:disable Metrics/LineLength
        raw "–ö–æ–º–ø–∞–Ω–∏—è #{company_link(vacancy)} (#{vacancy.location}), –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ #{published_at}#{analitics_information}"
        # rubocop:enable Metrics/LineLength
      end

      def company_link(vacancy)
        if vacancy.contact.site
          html.a(
            vacancy.contact.company,
            href: add_url_schema(vacancy.contact.site),
            title: "–°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏ #{vacancy.contact.company}",
            target: '_blank'
          )
        else
          vacancy.contact.company
        end
      end

      def remote_badge(vacancy)
        return unless vacancy.remote_available

        html.span(class: 'mr-2 badge badge-success') { '–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞' }
      end

      def position_type_badge(vacancy)
        html.span(class: 'mr-2 badge badge-info') { POSITION_TYPE_VALUES[vacancy.position_type] }
      end

      def tag_badges(tags)
        return if tags.empty?

        html.div(class: 'row') do
          div(class: 'col-sm-8') do
            tags.each do |tag|
              a(href: '#', class: 'badge badge-primary') { tag }
            end
          end
        end
      end

      def vacancy_salary_information(vacancy) # rubocop:disable Metrics/AbcSize
        currency = CURRENCY_VALUES[vacancy.salary_currency]
        unit = UNIT_VALUES[vacancy.salary_unit]

        html.span(class: 'salary') do
          text '–æ—Ç '
          span(class: 'money') { round_price(vacancy.salary_min) }
          text ' –¥–æ '
          span(class: 'money') { round_price(vacancy.salary_max) }
          text " #{currency} #{unit}"
        end
      end

      def round_price(price)
        return nil unless price
        return price if price.to_s.size <= 3

        price.to_s.reverse.gsub!(/(\d{3})(?=\d)/, '\\1 ').reverse
      end

      POSITION_TYPE_VALUES = {
        'full_time' => '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
        'part_time' => '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
        'contractor' => '–†–∞–±–æ—Ç–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É',
        'intern' => '–ò–Ω—Ç–µ—Ä–Ω–∞—Ç—É—Ä–∞',
        'temp' => '–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
        'other' => '–î—Ä—É–≥–æ–µ'
      }.freeze

      CURRENCY_VALUES = { 'rub' => '—Ä—É–±–ª–µ–π', 'usd' => '–¥–æ–ª–ª–∞—Ä–æ–≤', 'eur' => '–µ–≤—Ä–æ' }.freeze

      UNIT_VALUES = {
        'monthly' => '–≤ –º–µ—Å—è—Ü',
        'yearly' => '–≤ –≥–æ–¥',
        'by hour' => '–≤ —á–∞—Å',
        'per project' => '–∑–∞ –ø—Ä–æ–µ–∫—Ç'
      }.freeze
    end
  end
end
